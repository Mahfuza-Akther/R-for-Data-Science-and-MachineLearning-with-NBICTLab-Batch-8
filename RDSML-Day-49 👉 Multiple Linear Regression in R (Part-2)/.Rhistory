setwd("~/Desktop/GitHub practice/R-for-Data-Science-and-MachineLearning-with-NBICTLab-Batch-8/RDSML-Day-49 ðŸ‘‰ Multiple Linear Regression in R (Part-2)")
# Importing the dataset
dataset <- read.csv("50_Startups.csv")
# Importing the dataset
dataset <- read.csv("50_Startups.csv")
View(dataset)
dataset$State <- factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
View(dataset)
library(caTools)
set.seed(123)
split <- sample.split(dataset$Profit, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
regressor <- lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
summary(regressor)
#Predicting the Test set results
y_pred <- pedict(regressor, test_set)
#Predicting the Test set results
y_pred <- predict(regressor, test_set)
y_pred
regressor <- lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = training_set)
summary(regressor)
regressor <- lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regressor)
# Automated Stepwise Backward Elimination
full_model <- lm(Profit ~ ., data = training_set)
summary(full_model)
final_model <- step(full_model, direction = "backward")
final_model <- step(full_model, direction = "backward")
summary(final_model)
cor(training_set$R.D.Spend, training_set$Profit, method = 'pearson')
cor(training_set$Marketing.Spend, training_set$Profit, method = 'pearson')
cor.test(training_set$R.D.Spend, training_set$Profit, method = 'pearson')
cor.test(training_set$Marketing.Spend, training_set$, method = 'pearson')
or.test(training_set$Marketing.Spend, training_set$, method = 'pearson')
cor.test(training_set$Marketing.Spend, training_set$, method = 'pearson')
plot(training_set$R.D.Spend, training_set$Profit)
cor.test(training_set$Marketing.Spend, training_set$Profit, method = 'pearson')
plot(training_set$R.D.Spend, training_set$Profit)
plot(final_model )
install.packages("lmtest")
library(lmtest)
dwtest(final_model)
# Normality of Residuals
shapiro.test(rstandard(final_model))
qqplot(final_model )
qqnorm(rstandard(final_model)
qqline(rstandard(final_model)
qqnorm(rstandard(final_model))
qqline(rstandard(final_model))
# Checking multicollinearity
library(car)
# Checking multicollinearity
install.packages("car")
library(car)
vif(final_model)
plot(final_model$fitted.values, rstandard(final_model))
abline(h=0,col="red")
bptest(final_model)
bptest(final_model)
# Checking for independence of errors (should be nonsignificant)
# install.packages("lmtest")
library(lmtest)
bptest(final_model)
